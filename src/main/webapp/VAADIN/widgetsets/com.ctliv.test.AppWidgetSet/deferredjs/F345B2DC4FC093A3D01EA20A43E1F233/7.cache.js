$wnd.com_ctliv_test_AppWidgetSet.runAsyncCallback7("function $getCellForEvent(this$static, event_0){\n  var column, row, td;\n  td = $getEventTargetCell(this$static, event_0.nativeEvent);\n  if (!td) {\n    return null;\n  }\n  row = $getParentElement(td).sectionRowIndex;\n  column = td.cellIndex;\n  return new HTMLTable$Cell(row, column);\n}\n\nfunction $getEventTargetCell(this$static, event_0){\n  var body_0, td, tr;\n  td = ($clinit_DOM() , $eventGetTarget(event_0));\n  for (; td; td = (null , $getParentElement(td))) {\n    if ($equalsIgnoreCase($getPropertyString(td, 'tagName'), 'td')) {\n      tr = (null , $getParentElement(td));\n      body_0 = (null , $getParentElement(tr));\n      if (body_0 == this$static.bodyElem) {\n        return td;\n      }\n    }\n    if (td == this$static.bodyElem) {\n      return null;\n    }\n  }\n  return null;\n}\n\nfunction $prepareRow_0(this$static, row){\n  if (row < 0) {\n    throw toJs(new IndexOutOfBoundsException_0('Cannot access a row with a negative index: ' + row));\n  }\n  if (row >= this$static.numRows) {\n    throw toJs(new IndexOutOfBoundsException_0('Row index: ' + row + ', Row size: ' + this$static.numRows));\n  }\n}\n\nfunction $removeRow_0(this$static, row){\n  $removeRow(this$static, row);\n  --this$static.numRows;\n}\n\nfunction $resizeColumns(this$static, columns){\n  var i_0, j, td, tr, tr_0, td_0, td_1;\n  if (this$static.numColumns == columns) {\n    return;\n  }\n  if (columns < 0) {\n    throw toJs(new IndexOutOfBoundsException_0('Cannot set number of columns to ' + columns));\n  }\n  if (this$static.numColumns > columns) {\n    for (i_0 = 0; i_0 < this$static.numRows; i_0++) {\n      for (j = this$static.numColumns - 1; j >= columns; j--) {\n        $checkCellBounds(this$static, i_0, j);\n        td = $cleanCell(this$static, i_0, j, false);\n        tr = $getRow(this$static.bodyElem, i_0);\n        tr.removeChild(td);\n      }\n    }\n  }\n   else {\n    for (i_0 = 0; i_0 < this$static.numRows; i_0++) {\n      for (j = this$static.numColumns; j < columns; j++) {\n        tr_0 = $getRow(this$static.bodyElem, i_0);\n        td_0 = (td_1 = ($clinit_DOM() , $doc.createElement('td')) , td_1.innerHTML = '&nbsp;' , $clinit_DOM() , td_1);\n        $insertChild(tr_0, resolve(td_0), j);\n      }\n    }\n  }\n  this$static.numColumns = columns;\n  $resizeColumnGroup(this$static.columnFormatter, columns, false);\n}\n\nfunction $resizeRows(this$static, rows_0){\n  if (this$static.numRows == rows_0) {\n    return;\n  }\n  if (rows_0 < 0) {\n    throw toJs(new IndexOutOfBoundsException_0('Cannot set number of rows to ' + rows_0));\n  }\n  if (this$static.numRows < rows_0) {\n    addRows(($clinit_DOM() , this$static.bodyElem), rows_0 - this$static.numRows, this$static.numColumns);\n    this$static.numRows = rows_0;\n  }\n   else {\n    while (this$static.numRows > rows_0) {\n      $removeRow_0(this$static, this$static.numRows - 1);\n    }\n  }\n}\n\nfunction Grid(rows_0, columns){\n  HTMLTable.call(this);\n  $setCellFormatter(this, new HTMLTable$CellFormatter(this));\n  $setRowFormatter(this, new HTMLTable$RowFormatter(this));\n  $setColumnFormatter(this, new HTMLTable$ColumnFormatter(this));\n  $resizeColumns(this, columns);\n  $resizeRows(this, rows_0);\n}\n\nfunction addRows(table, rows_0, columns){\n  var td = $doc.createElement('td');\n  td.innerHTML = '&nbsp;';\n  var row = $doc.createElement('tr');\n  for (var cellNum = 0; cellNum < columns; cellNum++) {\n    var cell = td.cloneNode(true);\n    row.appendChild(cell);\n  }\n  table.appendChild(row);\n  for (var rowNum = 1; rowNum < rows_0; rowNum++) {\n    table.appendChild(row.cloneNode(true));\n  }\n}\n\ndefineClass(801, 771, $intern_62, Grid);\n_.getCellCount = function getCellCount_0(row){\n  return this.numColumns;\n}\n;\n_.getRowCount_0 = function getRowCount_0(){\n  return this.numRows;\n}\n;\n_.prepareCell = function prepareCell_0(row, column){\n  $prepareRow_0(this, row);\n  if (column < 0) {\n    throw toJs(new IndexOutOfBoundsException_0('Cannot access a column with a negative index: ' + column));\n  }\n  if (column >= this.numColumns) {\n    throw toJs(new IndexOutOfBoundsException_0('Column index: ' + column + ', Column size: ' + this.numColumns));\n  }\n}\n;\n_.prepareRow = function prepareRow_0(row){\n  $prepareRow_0(this, row);\n}\n;\n_.numColumns = 0;\n_.numRows = 0;\nvar Lcom_google_gwt_user_client_ui_Grid_2_classLit = createForClass('com.google.gwt.user.client.ui', 'Grid', 801, Lcom_google_gwt_user_client_ui_HTMLTable_2_classLit);\nfunction HTMLTable$Cell(rowIndex, cellIndex){\n  this.cellIndex_0 = cellIndex;\n  this.rowIndex = rowIndex;\n}\n\ndefineClass(2079, 1, {}, HTMLTable$Cell);\n_.cellIndex_0 = 0;\n_.rowIndex = 0;\nvar Lcom_google_gwt_user_client_ui_HTMLTable$Cell_2_classLit = createForClass('com.google.gwt.user.client.ui', 'HTMLTable/Cell', 2079, Ljava_lang_Object_2_classLit);\nfunction $resizeColumnGroup(this$static, columns, growOnly){\n  var i_0, num;\n  columns = $wnd.Math.max(columns, 1);\n  num = this$static.columnGroup.childNodes.length;\n  if (num < columns) {\n    for (i_0 = num; i_0 < columns; i_0++) {\n      $appendChild(this$static.columnGroup, $doc.createElement('col'));\n    }\n  }\n   else if (!growOnly && num > columns) {\n    for (i_0 = num; i_0 > columns; i_0--) {\n      $removeChild(this$static.columnGroup, this$static.columnGroup.lastChild);\n    }\n  }\n}\n\nfunction $select_2(this$static, p0, p1){\n  $invoke(this$static.val$handler2, new Method(new Type(Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridServerRpc_2_classLit), 'select'), stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_2, 1, 5, [valueOf_65(p0), valueOf_65(p1)]));\n}\n\nfunction $loadNativeJs_4(store){\n  var data_0 = {setter:function(bean, value_0){\n    bean.changedColor = value_0;\n  }\n  , getter:function(bean){\n    return bean.changedColor;\n  }\n  };\n  store.setPropertyData(Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, 'changedColor', data_0);\n  var data_0 = {setter:function(bean, value_0){\n    bean.changedX = value_0;\n  }\n  , getter:function(bean){\n    return bean.changedX;\n  }\n  };\n  store.setPropertyData(Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, 'changedX', data_0);\n  var data_0 = {setter:function(bean, value_0){\n    bean.changedY = value_0;\n  }\n  , getter:function(bean){\n    return bean.changedY;\n  }\n  };\n  store.setPropertyData(Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, 'changedY', data_0);\n  var data_0 = {setter:function(bean, value_0){\n    bean.columnCount = value_0.intValue();\n  }\n  , getter:function(bean){\n    return valueOf_65(bean.columnCount);\n  }\n  };\n  store.setPropertyData(Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, 'columnCount', data_0);\n  var data_0 = {setter:function(bean, value_0){\n    bean.rowCount = value_0.intValue();\n  }\n  , getter:function(bean){\n    return valueOf_65(bean.rowCount);\n  }\n  };\n  store.setPropertyData(Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, 'rowCount', data_0);\n}\n\ndefineClass(1852, 1, $intern_80);\n_.onSuccess_1 = function onSuccess_7(){\n  $setSuperClass(this.val$store2, Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, Lcom_vaadin_shared_AbstractFieldState_2_classLit);\n  $setClass(this.val$store2, 'com.vaadin.ui.components.colorpicker.ColorPickerGrid', Lcom_vaadin_client_ui_colorpicker_ColorPickerGridConnector_2_classLit);\n  $setInvoker(this.val$store2, Lcom_vaadin_client_ui_colorpicker_ColorPickerGridConnector_2_classLit, '!new', new ConnectorBundleLoaderImpl$7$1$1);\n  $setInvoker(this.val$store2, Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, '!new', new ConnectorBundleLoaderImpl$7$1$2);\n  $setReturnType(this.val$store2, Lcom_vaadin_client_ui_colorpicker_ColorPickerGridConnector_2_classLit, 'getState', new Type(Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit));\n  $loadNativeJs_4(this.val$store2);\n  $setPropertyType(this.val$store2, Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, 'changedColor', new Type(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1)));\n  $setPropertyType(this.val$store2, Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, 'changedX', new Type(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1)));\n  $setPropertyType(this.val$store2, Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, 'changedY', new Type(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1)));\n  $setPropertyType(this.val$store2, Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, 'columnCount', new Type(Ljava_lang_Integer_2_classLit));\n  $setPropertyType(this.val$store2, Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit, 'rowCount', new Type(Ljava_lang_Integer_2_classLit));\n  $addOnStateChangeMethod(this.val$store2, Lcom_vaadin_client_ui_colorpicker_ColorPickerGridConnector_2_classLit, new OnStateChangeMethod(Lcom_vaadin_client_ui_AbstractComponentConnector_2_classLit, 'handleContextClickListenerChange', stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_3, 2, 6, ['registeredEventListeners'])));\n  $setLoaded_0((!impl_3 && (impl_3 = new ConnectorBundleLoaderImpl) , impl_3), this.this$11.packageName);\n}\n;\nfunction ConnectorBundleLoaderImpl$7$1$1(){\n}\n\ndefineClass(1854, 1, $intern_111, ConnectorBundleLoaderImpl$7$1$1);\n_.invoke = function invoke_351(target, params){\n  return new ColorPickerGridConnector;\n}\n;\nvar Lcom_vaadin_client_metadata_ConnectorBundleLoaderImpl$7$1$1_2_classLit = createForClass('com.vaadin.client.metadata', 'ConnectorBundleLoaderImpl/7/1/1', 1854, Ljava_lang_Object_2_classLit);\nfunction ConnectorBundleLoaderImpl$7$1$2(){\n}\n\ndefineClass(1855, 1, $intern_111, ConnectorBundleLoaderImpl$7$1$2);\n_.invoke = function invoke_352(target, params){\n  return new ColorPickerGridState;\n}\n;\nvar Lcom_vaadin_client_metadata_ConnectorBundleLoaderImpl$7$1$2_2_classLit = createForClass('com.vaadin.client.metadata', 'ConnectorBundleLoaderImpl/7/1/2', 1855, Ljava_lang_Object_2_classLit);\nfunction ColorPickerGridConnector(){\n  AbstractComponentConnector.call(this);\n  this.rpc = castTo(create_2(Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridServerRpc_2_classLit, this), 2507);\n}\n\ndefineClass(1853, 31, $intern_168, ColorPickerGridConnector);\n_.getState = function getState_122(){\n  return !this.state && (this.state = $createState(this)) , castTo(castTo(this.state, 6), 348);\n}\n;\n_.getState_0 = function getState_123(){\n  return !this.state && (this.state = $createState(this)) , castTo(castTo(this.state, 6), 348);\n}\n;\n_.getWidget_0 = function getWidget_20(){\n  return !this.widget && (this.widget = new VColorPickerGrid) , castTo(this.widget, 225);\n}\n;\n_.createWidget = function createWidget_10(){\n  return new VColorPickerGrid;\n}\n;\n_.init_0 = function init_18(){\n  $addDomHandler((!this.widget && (this.widget = new VColorPickerGrid) , castTo(this.widget, 225)), this, ($clinit_ClickEvent() , $clinit_ClickEvent() , TYPE_1));\n}\n;\n_.onClick = function onClick_55(event_0){\n  $select_2(this.rpc, (!this.widget && (this.widget = new VColorPickerGrid) , castTo(this.widget, 225)).selectedX, (!this.widget && (this.widget = new VColorPickerGrid) , castTo(this.widget, 225)).selectedY);\n}\n;\n_.onStateChanged = function onStateChanged_16(stateChangeEvent){\n  $onStateChanged_0(this, stateChangeEvent);\n  (stateChangeEvent.hasPropertyChanged('rowCount') || stateChangeEvent.hasPropertyChanged('columnCount') || stateChangeEvent.hasPropertyChanged('updateGrid')) && $updateGrid((!this.widget && (this.widget = new VColorPickerGrid) , castTo(this.widget, 225)), (!this.state && (this.state = $createState(this)) , castTo(castTo(this.state, 6), 348)).rowCount, (!this.state && (this.state = $createState(this)) , castTo(castTo(this.state, 6), 348)).columnCount);\n  if (stateChangeEvent.hasPropertyChanged('changedX') || stateChangeEvent.hasPropertyChanged('changedY') || stateChangeEvent.hasPropertyChanged('changedColor') || stateChangeEvent.hasPropertyChanged('updateColor')) {\n    $updateColor((!this.widget && (this.widget = new VColorPickerGrid) , castTo(this.widget, 225)), (!this.state && (this.state = $createState(this)) , castTo(castTo(this.state, 6), 348)).changedColor, (!this.state && (this.state = $createState(this)) , castTo(castTo(this.state, 6), 348)).changedX, (!this.state && (this.state = $createState(this)) , castTo(castTo(this.state, 6), 348)).changedY);\n    (!this.widget && (this.widget = new VColorPickerGrid) , castTo(this.widget, 225)).gridLoaded || $invoke(this.rpc.val$handler2, new Method(new Type(Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridServerRpc_2_classLit), 'refresh'), stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_2, 1, 5, []));\n  }\n}\n;\nvar Lcom_vaadin_client_ui_colorpicker_ColorPickerGridConnector_2_classLit = createForClass('com.vaadin.client.ui.colorpicker', 'ColorPickerGridConnector', 1853, Lcom_vaadin_client_ui_AbstractComponentConnector_2_classLit);\nfunction $createGrid(this$static){\n  this$static.grid = new Grid(this$static.rows_0, this$static.columns);\n  $setWidth_0(this$static.grid, '100%');\n  $setHeight_0(this$static.grid, '100%');\n  $addDomHandler(this$static.grid, this$static, ($clinit_ClickEvent() , $clinit_ClickEvent() , TYPE_1));\n  return this$static.grid;\n}\n\nfunction $updateColor(this$static, changedColor, changedX, changedY){\n  var c, element;\n  if (changedColor != null && changedX != null && changedY != null) {\n    if (changedColor.length == changedX.length && changedX.length == changedY.length) {\n      for (c = 0; c < changedColor.length; c++) {\n        element = $getElement_0(this$static.grid.cellFormatter, __parseAndValidateInt(changedX[c], 10), __parseAndValidateInt(changedY[c], 10));\n        element.style['background'] = changedColor[c];\n      }\n    }\n    this$static.gridLoaded = true;\n  }\n}\n\nfunction $updateGrid(this$static, rowCount, columnCount){\n  this$static.rows_0 = rowCount;\n  this$static.columns = columnCount;\n  $remove_3(this$static, this$static.grid);\n  $add_3(this$static, $createGrid(this$static), 0, 0);\n}\n\nfunction VColorPickerGrid(){\n  AbsolutePanel.call(this);\n  this.rows_0 = 1;\n  this.columns = 1;\n  this.gridLoaded = false;\n  $add_3(this, $createGrid(this), 0, 0);\n}\n\ndefineClass(225, 536, {50:1, 59:1, 20:1, 8:1, 16:1, 19:1, 15:1, 36:1, 40:1, 21:1, 38:1, 14:1, 12:1, 225:1, 26:1}, VColorPickerGrid);\n_.addClickHandler = function addClickHandler_8(handler){\n  return $addDomHandler(this, handler, ($clinit_ClickEvent() , $clinit_ClickEvent() , TYPE_1));\n}\n;\n_.onClick = function onClick_56(event_0){\n  var cell;\n  cell = $getCellForEvent(this.grid, event_0);\n  if (!cell) {\n    return;\n  }\n  this.selectedY = cell.rowIndex;\n  this.selectedX = cell.cellIndex_0;\n}\n;\n_.columns = 0;\n_.gridLoaded = false;\n_.rows_0 = 0;\n_.selectedX = 0;\n_.selectedY = 0;\nvar Lcom_vaadin_client_ui_colorpicker_VColorPickerGrid_2_classLit = createForClass('com.vaadin.client.ui.colorpicker', 'VColorPickerGrid', 225, Lcom_google_gwt_user_client_ui_AbsolutePanel_2_classLit);\nfunction ColorPickerGridState(){\n  AbstractFieldState.call(this);\n}\n\ndefineClass(348, 13, {6:1, 13:1, 30:1, 103:1, 348:1, 3:1}, ColorPickerGridState);\n_.columnCount = 0;\n_.rowCount = 0;\nvar Lcom_vaadin_shared_ui_colorpicker_ColorPickerGridState_2_classLit = createForClass('com.vaadin.shared.ui.colorpicker', 'ColorPickerGridState', 348, Lcom_vaadin_shared_AbstractFieldState_2_classLit);\n$entry(onLoad)(7);\n\n//# sourceURL=com.ctliv.test.AppWidgetSet-7.js\n")
